package jp.diavolo.mapgenerator.original;

import java.util.Random;

import jp.diavolo.FloorMap;
import jp.diavolo.FloorMap.FloorType;
import jp.diavolo.mapgenerator.original.DungeonData.FloorData;
import android.util.Log;

public class OriginalMapGenerator{
    private Random rnd;
    private int waterMapType;
    private int[][] floor;
    private byte[][] roomNumberMaps;
    private DoorWay[][] doorways;
    private FloorData floorData;

    public FloorMap generate(long seed, int depth, FloorData floorData){
        rnd = new Random(seed);
        this.floorData = floorData;
        final int width = 70;
        final int height = 50;

        waterMapType = rnd.nextInt(40);
        if ( waterMapType == 6 ) waterMapType = 1;
        if ( waterMapType <= 2 ) waterMapType = 0;

        boolean mapIsNormalFloor = true;

        /*
        if (dungeonID == 1) {
            if (depth <= 2) visualType = 15; //下水道
            else if (depth <= 5) visualType = 19; //郊外の森林
            else if (depth <= 8) visualType = 11; //砂漠
            else if (depth <= 11) visualType = 4; //
            else if (depth == 12) {
                visualType = 7; //エンヤホテル
                waterMapType = 0;
            }
        }
        */
        /*
        if ( dungeonID == 2 ) {
            if (depth <= 5 ) visualType = 3;
            else if (depth <= 8 ) visualType = 6;
            else if (depth <= 11 ) visualType = 2;
            else if (depth <= 14 ) visualType = 5;
            else if (depth <= 19 ) visualType = 4;
            else if (depth <= 22 ) visualType = 24;
            else if (depth <= 25 ) visualType = 20;
            else visualType = 12;
        }
        if ( dungeonID == 3 || dungeonID == 4 ) {
            final int[] table = {2,3,6,5,4,8,18,13,14,12,21,20,11,13,24,9};
            visualType = table[rnd.nextInt(16)];
            if ( visualType == 8 ) waterMapType = 0;
            if ( dungeonID == 3 && depth >= 90 ) visualType = 22;
            if ( dungeonID == 3 && depth == 99 ) visualType = 2;
        }
        */
        /*
        if ( waterMapType == 1 && mapShopRoomno != 0 ) {
            waterMapType = 1;
        }
        */
        if ( floorData.dungeonID == 1 && depth <= 2 ) {
            waterMapType = 99;
        }
        if ( floorData.dungeonID == 2 && depth == 28 && mapIsNormalFloor) {
            waterMapType = 99;
        }
        if ( floorData.dungeonID == 2 && depth == 29 && mapIsNormalFloor) {
            waterMapType = 99;
        }
        alloc(width, height);
        int validRooms = generate(width, height);
        while(validRooms < 6){
            validRooms = generate(width, height);
        }

        FloorMap floorMap = new FloorMap(rnd, width, height, floorData.mapchipName, floor, roomNumberMaps);
        return floorMap;
    }

    private void alloc(int width, int height) {
        floor = new int[height][width];
        roomNumberMaps = new byte[height][width];
        doorways = new DoorWay[12][4];
        for(byte j = 0; j < 12; ++j){
            doorways[j] = new DoorWay[4];
            for(int i=0; i<4; ++i){
                doorways[j][i] = new DoorWay();
            }
        }
    }

    private int generate(int width, int height) {
        String waterMap = getWaterMap(waterMapType);

        int index=0;
        for(int y = 0; y < height; ++y){
            for(int x = 0; x < width; ++x){
                if(y < 38 && x < 56){
                    switch(waterMap.charAt(index)){
                    case '#':
                        floor[y][x] = FloorType.WALL.value(); break;
                    case '^':
                        floor[y][x] = FloorType.WATER.value(); break;
                    }
                    roomNumberMaps[y][x] = -1;
                    index++;
                }else{
                    floor[y][x] = FloorType.WALL.value();
                }
            }
        }

        for(byte roomno = 1; roomno <= 12; ++roomno){
            for(int i=0; i<4; ++i){
                doorways[roomno-1][i].reset();
            }
            RoomBuilder rb = getRoomBuilder();
            int x = 18 + (roomno -1) % 4 * 13 - rb.width - rnd.nextInt(13 - rb.width);
            int y = 16 + (roomno -1) / 4 * 11 - rb.height - rnd.nextInt(11 - rb.height);
            rb.build(rnd, floor, roomNumberMaps, doorways[roomno-1], roomno, x, y);
        }

        link();

        //余った出入り口を埋める
        int validRooms = 0;
        for(byte roomno = 1; roomno <= 12; ++roomno){
            int count = 0;
            for(int i=0; i<4; ++i){
                if(doorways[roomno-1][i].invalid) continue;
                if(!doorways[roomno-1][i].used){
                    doorways[roomno-1][i].invalid();
                }else{
                    count++;
                }
            }
            if(count>0){
                validRooms++;
                continue;
            }

            //隣との連絡がひとつもない部屋は消す。
            int x = 5 + (roomno -1) % 4 * 13;
            int y = 5 + (roomno -1) / 4 * 11;
            for(int j=y; j<y+11; ++j){
                for(int i=x; i<x+13; ++i){
                    if(roomNumberMaps[j][i] == roomno){
                        floor[j][i] = FloorType.WALL.value();
                    }
                }
            }
        }
        return validRooms;
    }

    private void link() {
        //縦の隣の部屋への通路
        for(byte roomno = 1; roomno <= 8; ++roomno){
            tryMakeVerticalPath(doorways[roomno-1][DoorWay.DOWN], doorways[roomno-1 + 4][DoorWay.UP]);
        }
        //横の隣の部屋への通路
        for(byte roomno = 1; roomno <= 12; ++roomno){
            if(roomno % 4 == 0) continue;
            tryMakeHorizontalPath(doorways[roomno-1][DoorWay.RIGHT], doorways[roomno-1 + 1][DoorWay.LEFT]);
        }
        //縦の隣の隣の部屋への通路
        for(byte roomno = 1; roomno <= 4; ++roomno){
            tryMakeVerticalPath(doorways[roomno-1][DoorWay.DOWN], doorways[roomno-1 + 8][DoorWay.UP]);
        }
        //横の隣の隣の部屋への通路
        for(byte roomno = 1; roomno <= 12; ++roomno){
            if(roomno % 4 == 0) continue;
            if(roomno % 4 == 3) continue;
            tryMakeHorizontalPath(doorways[roomno-1][DoorWay.RIGHT], doorways[roomno-1 + 2][DoorWay.LEFT]);
        }
    }

    private void tryMakeVerticalPath(DoorWay d, DoorWay d2) {
        if(d == null || d2 == null) return;
        if(d.used || d2.used) return;
        if(d.invalid || d2.invalid) return;
        int startY = Math.min(d.pos.y, d2.pos.y);
        int endY = Math.max(d.pos.y, d2.pos.y);
        int turn = startY+1 + rnd.nextInt(endY - startY - 1); //どこで曲がるか

        for(int i = startY; i < turn; ++i){
            floor[i][d.pos.x] = FloorType.PATH.value();
        }

        int startX = Math.min(d.pos.x, d2.pos.x);
        int endX = Math.max(d.pos.x, d2.pos.x);
        for(int i = startX; i <= endX; ++i){
            floor[turn][i] = FloorType.PATH.value();
        }
        for(int i = turn+1; i <= endY; ++i){
            floor[i][d2.pos.x] = FloorType.PATH.value();
        }

        d.used();
        d2.used();
    }

    private void tryMakeHorizontalPath(DoorWay d, DoorWay d2) {
        if(d == null || d2 == null) return;
        if(d.used || d2.used) return;
        if(d.invalid || d2.invalid) return;
        int startX = Math.min(d.pos.x, d2.pos.x);
        int endX = Math.max(d.pos.x, d2.pos.x);
        int turn = startX+1 + rnd.nextInt(endX - startX - 1); //どこで曲がるか

        for(int i = startX; i < turn; ++i){
            floor[d.pos.y][i] = FloorType.PATH.value();
        }

        int startY = Math.min(d.pos.y, d2.pos.y);
        int endY = Math.max(d.pos.y, d2.pos.y);
        for(int i = startY; i <= endY; ++i){
            floor[i][turn] = FloorType.PATH.value();
        }
        for(int i = turn+1; i <= endX; ++i){
            floor[d2.pos.y][i] = FloorType.PATH.value();
        }

        d.used();
        d2.used();
    }

    private RoomBuilder getRoomBuilder(){
        if(rnd.nextInt(100) < 30){
            Log.v("OriginalMapGenerator", "no room");
            return new RoomBuilder();
        }
        int i = rnd.nextInt(100);
        if(i<75){ //普通の大きさランダムの部屋
            Log.v("OriginalMapGenerator", "randomsize");
            return new RandomRoomBuilder(rnd);
        }else if(i < 85){
            Log.v("OriginalMapGenerator", "with barricade");
            return new WallRoomBuilder(rnd);
        }else if(i < 98){
            Log.v("OriginalMapGenerator", "with water");
            return new WaterRoomBuilder(rnd, floorData.dungeonID);
        }else{
            Log.v("OriginalMapGenerator", "shop");
            return new RandomRoomBuilder(rnd); //ShopBuilder(rnd);
        }
    }

    private String getWaterMap(int waterMapID){
        switch(waterMapID){
        default:
            // nowater
            return
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################";
        case 1:
            // almost water
            return
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "########################################################";
        case 2:
            // river1
            return
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "###############^^^^^^^^^################################"+
            "#######################^^^^^^^^^^#######################"+
            "####################^^^^########^^^^^^^^^^^#############"+
            "################^^^^^#####################^^^^^^^^^^####"+
            "##########^^^^^^^##################################^^^^#"+
            "######^^^^^#############################################"+
            "##########^^^###########################################"+
            "############^^^^########################################"+
            "###############^^^^^^###################################"+
            "####################^^^^^^##############################"+
            "#########################^^^^^^^########################"+
            "###############################^^^^^^^##################"+
            "#####################################^^^^^^#############"+
            "##########################################^^^^^#########"+
            "#########################################^^###^^^^^^^^^#"+
            "####################################^^^^^^##############"+
            "##################################^^^###################"+
            "#################################^^#####################"+
            "################################^^######################"+
            "###########################^^^^^^#######################"+
            "#####################^^^^^^^############################"+
            "###############^^^^^^^#####^^^^^########################"+
            "########^^^^^^^^###############^^^^^^###################"+
            "######^^^###########################^^##################"+
            "#####################################^^#################"+
            "######################################^^^^^#############"+
            "##########################################^^^^^#########"+
            "##############################################^^^^^^^^^#"+
            "###########################################^^^^#########"+
            "######################################^^^^^^############"+
            "################################^^^^^^^#################"+
            "########################################################";
        case 3:
            //river2
            return
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "###########################################^^^^^########"+
            "##########################################^^^^^^^#######"+
            "####################################^^^^^^^^^^^^^#######"+
            "#################################^^^^#####^^^^^^^#######"+
            "#############################^^^^^#########^^^^^########"+
            "############################^^##########################"+
            "########################^^^^^###########################"+
            "######################^^^^^^^^^#########################"+
            "#####################^^^^^^^^^^^########################"+
            "#####################^^^^^^^^^^^^^^^^^##################"+
            "#####################^^^^^^^^^^^#####^^^^^##############"+
            "######################^^^^^^^^^##########^^^^^##########"+
            "########################^^^^^################^^^^^^^^###"+
            "#########################^###################^######^^^#"+
            "#########################^^#################^^##########"+
            "##########################^^###############^^###########"+
            "###########################^^##############^############"+
            "#####################^^^^^^^^^###########^^^############"+
            "###################^^^#######^^^^^^#####^^^^^###########"+
            "#################^^^##############^^^^^^^^^^^###########"+
            "###############^^^#######################^^^############"+
            "##############^^########################################"+
            "#############^^^^#######################################"+
            "############^^^^^^######################################"+
            "############^^^^^^######################################"+
            "############^^^^^^######################################"+
            "#############^^^^#######################################"+
            "########################################################"+
            "########################################################"+
            "########################################################";
        case 4:
            //river 3
            return
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "###############################################^^#######"+
            "#############################################^^^########"+
            "##########################################^^^^##########"+
            "#######################################^^^^#############"+
            "#################################^^^^^^^################"+
            "#############################^^^^^######################"+
            "#######################^^^^^^^##########################"+
            "#################^^^^^^^################################"+
            "###########^^^^^^^##^###################################"+
            "######^^^^^^########^^##################################"+
            "#####################^^^################################"+
            "#######################^^^##############################"+
            "#########################^^#############################"+
            "##########################^^^^^#########################"+
            "##############################^^^#######################"+
            "################################^^^^####################"+
            "###################################^^^^^################"+
            "#######################################^^^##############"+
            "#########################################^^^^^##########"+
            "########################################^^###^^^^^^#####"+
            "######################################^^^#########^^^^^#"+
            "###################################^^^^#################"+
            "##############################^^^^^^####################"+
            "#########################^^^^^^#########################"+
            "#####################^^^^^##############################"+
            "#################^^^^^##################################"+
            "##############^^^^######################################"+
            "#############^^#########################################"+
            "############^^##########################################"+
            "###########^^###########################################"+
            "##########^^############################################"+
            "########################################################";
        case 5:
            //bay
            return
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "#################################################^^^^^^#"+
            "#############################################^^^^^^^^^^#"+
            "##########################################^^^^^^^^^^^^^#"+
            "#######################################^^^^^^^^^^^^^^^^#"+
            "#################################^^^^^^^^^^^^^^^^^^^^^^#"+
            "#############################^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "############################^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "############################^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "###########################^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "###########################^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "###########################^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "############################^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "###############################^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "#################################^^^^^^^^^^^^^^^^^^^^^^#"+
            "####################################^^^^^^^^^^^^^^^^^^^#"+
            "######################################^^^^^^^^^^^^^^^^^#"+
            "##########################################^^^^^^^^^^^^^#"+
            "############################################^^^^^^^^^^^#"+
            "############################################^^^^^^^^^^^#"+
            "#############################################^^^^^^^^^^#"+
            "##############################################^^^^^^^^^#"+
            "##################################################^^^^^#"+
            "#####################################################^^#"+
            "######################################################^#"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################";
        case 6:
        case 99:
            // islands
            return
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "########################################################"+
            "######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "######^####^######^^^^^^^^^^#####^^^######^^^^^^##^^^^^#"+
            "######^####^######^^^######^#####^^^######^^##^^##^^^^^#"+
            "######^^^^^^######^^^######^^^^^^^^^######^^##^^##^^^^^#"+
            "######^^##^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^##^^^^^^^^^#"+
            "######^^##^########^#####^^^^^^^^^^^^####^^^^^^^^^^^^^^#"+
            "######^^##^########^#####^^^^^^^^^#######^^^^^^^^^^^^^^#"+
            "######^^^^^########^#####^^^^^^^^^#######^^^######^^^^^#"+
            "######^^^^^########^^^^^^^^^^^^^^^^^^^^^^^^^######^^^^^#"+
            "######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#####^^^^^#"+
            "######^^^^^^^^^^#####^^^^^##^^^^^^^^^^###^^^^^^^^^^^^^^#"+
            "######^##^####^^#####^^^^^##^^^^^^^^^^###^^#####^^^^^^^#"+
            "######^##^####^^#####^^^^^^^^^^^^^^^^^^^^^^#####^^^^^^^#"+
            "######^^^^^^^^^^^^^^^^^^^^^^^^^^^^#####^^^^^^^^^^^^^^^^#"+
            "######^###^^^^^^^^^^^^^^^^^^^###^^#####^^####^^^^^^^^^^#"+
            "######^###^^####^^^#####^^^^^###^^#####^^####^####^^^^^#"+
            "######^###^^####^^^#####^^^^^###^^#####^^^^^^^####^^^^^#"+
            "######^^^^^^^^^^^^^#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "######^^^#####^^^^^#####^^^^^^^^^^^^^^^^^^^^######^^^^^#"+
            "######^^^#####^^^^^^^^^^^^^^^^^^^^^#####^^^^######^^^^^#"+
            "######^^^#####^^^^^^^^^^^^^^^^^^^^^#####^^^^^#####^^^^^#"+
            "######^^^^^^^^^^^^^^####^^^^^#####^^^^^^^^^^^#####^^^^^#"+
            "######^###^^^^^^^^######^###^#####^^^^^^^^^^^^^^^^^^^^^#"+
            "######^###^^^^^^^^######^###^#####^#######^#####^^^^^^^#"+
            "######^#####^^^^^^^^^^^^^^^^^^^^^^^#######^#####^^^^^^^#"+
            "######^#####^^^^^^^^^^^^^^^^^^^^^^^#####^^^^^^^^^^^^^^^#"+
            "######^#####^^^^^^^^^^^^^^^^^##^^^^^^^^^^^^^^^^###^^^^^#"+
            "######^^^^^^^^^^#####^^^^^^^^##^^^^^^^^^^^^^^^^###^^^^^#"+
            "######^^^^^^^^^^#####^^^^^^^^##^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "######^^^^^^^^^^#####^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "######^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^#"+
            "########################################################";
        }
    }
}
